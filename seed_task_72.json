[
    {
        "instruction": "تابع مرتب سازی انتخابی را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "def selectionSort(array, size):\n    for ind in range(size):\n        min_index = ind\n         for j in range(ind + 1, size):\n            if array[j] < array[min_index]:\n                min_index = j\n         # swapping the elements to sort the array\n        (array[ind], array[min_index]) = (array[min_index], array[ind])"
    },
    {
        "instruction": "تابع محاسبه ب.م.م دو عدد را در پایتون بنویسید",
        "input": "",
        "output": "def gcd(a, b):\n\n    if (a == 0):\n        return b\n    if (b == 0):\n        return a\n\n    if (a == b):\n        return a\n\n    if (a > b):\n        return gcd(a-b, b)\n    return gcd(a, b-a)"
    },     
    {
        "instruction": "تابع محاسبه ک.م.م دو عدد را در پایتون بنویسید",
        "input": "",
        "output": "def calculate_lcm(x, y):\n  # selecting the greater number\n  if x > y:\n    greater = x\n  else:\n    greater = y\n  while(True):\n    if((greater % x == 0) and (greater % y == 0)):\n      lcm = greater\n      break\n    greater += 1\n  return lcm"
    },    
    {
        "instruction": "تابع زخیره در فایل به زبان پایتون بنویسید",
        "input": "",
        "output": "def save_data(data, file_name):\n    file = open(file_name, 'w')\n    for line in data:\n        file.write(line + '\\n')\n    file.close()"
    },
    {
        "instruction": "تابع محاسبه اعداد اول به زبان پایتون بنویسید",
        "input": "",
        "output": "def find_primes(limit):\n    primes = []\n    for num in range(2, limit + 1):\n        is_prime = True\n        for factor in range(2, int(num ** 0.5) + 1):\n            if num % factor == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"
    },
    {
        "instruction": "تابعی در پایتون بنویسید که مشخص کند عدد ورودی فرد است یا زوج",
        "input": "",
        "output": "def even_odd(n):\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is odd')"
    },
    {
        "instruction": "تابعی در پایتون بنویسید که فاکتوریل یک عدد را محاسبه کند",
        "input": "",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "به کمک پایتون تابعی بنویسید که یک رشته را معکوس کند",
        "input": "",
        "output": "def reverse(s):\n    return s[::-1]"
    },
    {
        "instruction": "تابع فیبوناچی را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "def fibonacci(limit):\n    a = 0\n    b = 1\n    fib_list = [a, b]\n    while a + b < limit:\n        c = a + b\n        fib_list.append(c)\n        a = b\n        b = c\n    return fib_list"
    },
    {
        "instruction": "تابعی بنویسید که مشخص کند آیا یک رشته با معکوسش یکسان است یا خیر",
        "input": "",
        "output": "def palindrome(s):\n    return s == s[::-1]"
    },
    {
        "instruction": "تابع مرتب سازی نزولی در پایتون بنویسید",
        "input": "",
        "output": "def sort_list(lst):\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst"
    },
    {
        "instruction": "تابعی در پایتون بنویسید که بیشترین مقدار را در یک لیست ورودی پیدا کند",
        "input": "",
        "output": "def max_list(lst):\n    max = lst[0]\n    for num in lst:\n        if num > max:\n            max = num\n    return max"
    },
    {
        "instruction": "چگونه در پایتون قدر مطلق یک مقدار ورودی را خروجی دهیم ؟ ",
        "input": "",
        "output": "def absolute_value(n):\n      return abs(n)"
    },
    {
        "instruction": "با استفاده از پایتون وجود زیر رشته ورودی در یک رشته از قبل را چک کنید و در صورت وجود اندیس آن را خروجی دهید",
        "input": "",
        "output": "def find_index(s, substring):\n        return s.find(substring)"
    },
    {
        "instruction": "تابعی در پایتون بنویسید که یک زیر رشته را با یک رشته جدید جایگزین کند",
        "input": "",
        "output": "def replace_substring(s, old, new):\n        return s.replace(old, new)"
    },
    {
        "instruction": "با استفاده از پایتون یک لیست ورودی بگیرید و فقط اعضایی که یک بار تکرار شده‌اند را خروجی بدهید",
        "input": "",
        "output": "def get_unique_elements(lst):\n        return list(set(lst))"
    },
    {
        "instruction": "تعداد حروف صدا دار انگلیسی در یک رشته را با کمک تابعی از پایتون خروجی بدهید",
        "input": "",
        "output": "def count_vowels(s):\n        return sum([s.count(vowel) for vowel in 'aeiou'])"
    },
    {
        "instruction": "چارک های اول،دوم و سوم را با کمک پایتون در یک لیست ورودی پیدا کنید",
        "input": "",
        "output": "import numpy as np\n        def calculate_quartiles(data):\n            data = np.array(data)\n            Q1 = np.percentile(data, 25)\n            Q2 = np.percentile(data, 50)\n            Q3 = np.percentile(data, 75)\n            return Q1, Q2, Q3"
    },
    {
        "instruction": "با استفاده از پایتون ساختمان داده پشته را پیاده سازی کنید",
        "input": "",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def is_empty(self):\n        return len(self.stack) == 0\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        else:\n            return 'Stack is empty.'\n    def peek(self):\n        if not self.is_empty():\n            return self.stack[-1]\n        else:\n            return 'Stack is empty.'\n    def size(self):\n        return len(self.stack)\n"
    },
    {
        "instruction": "ساختمان داده صف را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def is_empty(self):\n        return len(self.queue) == 0\n    def enqueue(self, item):\n        self.queue.append(item)\n    def dequeue(self):\n        if not self.is_empty():\n            return self.queue.pop(0)\n        else:\n            return 'Queue is empty.'\n    def size(self):\n        return len(self.queue)\n"
    },
    {
        "instruction": "با استفاده از پایتون درخت جستجوی دودویی را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    else:\n        if root.val < key:\n            root.right = insert(root.right, key)\n        else:\n            root.left = insert(root.left, key)\n    return root\n"
    },
    {
        "instruction": "پیمایش درخت میان ترتیب را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "def printInorder(root):\n    if root:\n        printInorder(root.left)\n        print(root.val, end=' ')\n        printInorder(root.right)\n"
    },
    {
        "instruction": "پیمایش عمیق گراف را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(graph[vertex] - visited)\n    return visited\n"
    },
    {
        "instruction": "با استفاده از از زبان برنامه نویسی پایتون پیمایش سطحی گراف را پیاده سازی کنید",
        "input": "",
        "output": "from collections import deque\n\ndef bfs(graph, root):\n    visited = set()\n    queue = deque([root])\n    while queue:\n        vertex = queue.popleft()\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited\n"
    },
    {
        "instruction": "پایین ترین جد مشترک دو نود داده شده در یک گراف را با استفاده از پایتون پیدا کنید",
        "input": "",
        "output": "class Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\ndef find_LCA(root, n1, n2):\n    if root is None:\n        return None\n    if root.key == n1 or root.key == n2:\n        return root\n    left_lca = find_LCA(root.left, n1, n2)\n    right_lca = find_LCA(root.right, n1, n2)\n    if left_lca and right_lca:\n        return root\n    return left_lca if left_lca is not None else right_lca\n"
    },
    {
        "instruction": "پیمایش پس ترتیب درخت را در پایتون پیاده سازی کنید",
        "input": "",
        "output": "def preorder(root):\n    if root:\n        print(root.val, end=' ')\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)\n"
    },
    {
        "instruction": "درصد شباهت دو رشته ورودی را با استفاده از زبان پایتون پیدا کنید",
        "input": "",
        "output": "import re\nimport math\nfrom collections import Counter\n\ndef get_cosine_similarity(str1, str2):\n    WORD = re.compile(r\"\\w+\")\n\n    def get_cosine(vec1, vec2):\n        intersection = set(vec1) & set(vec2)\n        numerator = sum([vec1[x] * vec2[x] for x in intersection])\n\n        sum1 = sum([vec1[x] ** 2 for x in vec1])\n        sum2 = sum([vec2[x] ** 2 for x in vec2])\n        denominator = math.sqrt(sum1) * math.sqrt(sum2)\n\n        if not denominator:\n            return 0.0\n        else:\n            return float(numerator) / denominator\n\n    def text_to_vector(text):\n        words = WORD.findall(text)\n        return Counter(words)\n\n    vector1 = text_to_vector(str1)\n    vector2 = text_to_vector(str2)\n\n    cosine_similarity = get_cosine(vector1, vector2)\n    similarity_percentage = round(cosine_similarity * 100, 2)\n\n    return similarity_percentage"
    },    
    {
        "instruction": "آناگرام به کلمه‌هایی گفته می‌شود که حروفشان یکسان است اما بخاطر چینش متفاوت دو کلمه معنی‌دار متفاوت تولید می‌شود. حال با استفاده از پایتون بگویید آیا دو رشته آناگرام اند یا خیر ",
        "input": "",
        "output": "def are_anagrams(str1, str2):\n        return sorted(str1) == sorted(str2)"
    },
    {
        "instruction": "برای تبدیل درجه سانتی‌گراد به فارنهایت تابعی در پایتون بنویسید",
        "input": "",
        "output": "def celsius_to_fahrenheit(celsius):\n        return (celsius * 9/5) + 32"
    },
    {
        "instruction": "عدد آرمسترانگ به عددی گفته می‌شود که برابر با مجموع ارقامش هرکدام به توان تعداد ارقامش باشد حال تابعی در پایتون بنویسید که بگوید عدد ورودی آرمسترانگ است یا خیر",
        "input": "",
        "output": "def is_armstrong_number(number):\n        digits = [int(digit) for digit in str(number)]\n        return sum([digit ** len(digits) for digit in digits]) == number"
    },
    {
        "instruction": "در نظریه اعداد به عددی که برابر با مجموع مقسوم‌علیه‌های سرهٔ مثبت خود باشد عدد تام می گوییم. حال با استفاده از زبان برنامه نویسی پایتون تابعی بنویسید که تشخیص دهد عدد ورودی تام است یا خیر",
        "input": "",
        "output": "def is_perfect_number(number):\n        divisors = [i for i in range(1, number) if number % i == 0]\n        return sum(divisors) == number"
    },
    {
        "instruction": "تابعی بنویسید که میانه را حساب کند،‌از زبان برنامه نویسی پایتون استفاده کنید",
        "input": "",
        "output": "def calculate_median(numbers):\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        return sorted_numbers[n // 2]\n    else:\n        mid1 = sorted_numbers[(n // 2) - 1]\n        mid2 = sorted_numbers[n // 2]\n        return (mid1 + mid2) / 2"
    },
    {
        "instruction": "با استفاده از پایتون مقسوم‌علیه‌های اول یک عدد را پیدا کنید",
        "input": "",
        "output": "def prime_factors(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"
    },
    {
        "instruction": "از زبان برنامه نویسی پایتون کمک بگیرید و محاسبه کنید که ایا عدد داده شده مربع کامل است یا خیر",
        "input": "",
        "output": "def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n"
    },
    {
        "instruction": "یک عدد در مبنای ده به شما ورودی داده می‌شود و از شما خواسته شده تعداد صفرهای این عدد را در حالت باینری خروجی دهید، از پایتون کمک گرفته و یک تابع برای این کار بنویسید",
        "input": "",
        "output": "def count_zeros_in_binary(n):\n        return bin(n).count('0')"
    },
    {
        "instruction": "کواریانس دو لیست از اعداد را به کمک پایتون حساب کنید",
        "input": "",
        "output": "def covariance(list1, list2):\n        mean1 = sum(list1) / len(list1)\n        mean2 = sum(list2) / len(list2)\n        return sum((x - mean1) * (y - mean2) for x, y in zip(list1, list2)) / len(list1)"
    },
    {
        "instruction": "یک لیست به شما داده شده،‌ حال چک کنید که ایا این لیست مرتب سازی شده است یا خیر،‌با استفاده از پایتون",
        "input": "",
        "output": "def is_sorted(lst):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"
    },
    {
        "instruction": "با استفاده از پایتون برای یک  عدد ورودی در مبنای ده بیشترین تعداد یک‌های پشت سر هم در حالت باینری عدد را محاسبه کنید",
        "input": "",
        "output": "def max_consecutive_ones(n):\n        return max(len(group) for group in bin(n)[2:].split('0'))"
    },
    {
        "instruction": "با استفاده از پایتون یک پسوورد جنریتور بسازید",
        "input": "",
        "output": "import random\nimport string\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for _ in range(length))"
    },
    {
        "instruction": "با استفاده از پایتون بگویید که آیا عدد ورودی یک عدد فیبوناچی‌است یا خیر",
        "input": "",
        "output": "def is_fibonacci_number(n):\n        return (5 * n * n + 4) ** 0.5 % 1 == 0 or (5 * n * n - 4) ** 0.5 % 1 == 0"
    },
    {
        "instruction": "تابع فیبوناچی را با استفاده از فرمول آن در پایتون پیاده سازی کنید",
        "input": "",
        "output": "import math\n\ndef fibonacci_binet(n):\n    sqrt_5 = math.sqrt(5)\n    phi = (1 + sqrt_5) / 2\n    psi = (1 - sqrt_5) / 2\n\n    return round((phi**n - psi**n) / sqrt_5)"
    },
    {
        "instruction": "ترانهاده یک ماتریس را با استفاده از پایتون پیدا کنید",
        "input": "",
        "output": "def transpose_matrix(matrix):\n        return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"
    },
    {
        "instruction": "مثلث خیام-پاسکال را با استفاده از پایتون پیاده سازی کنید",
        "input": "",
        "output": "def generate_pascals_triangle(n):\n    triangle = [[1] * (i + 1) for i in range(n)]\n    for i in range(2, n):\n        for j in range(1, i):\n            triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]\n    return triangle"
    },
    {
        "instruction": "با استفاده از پایتون بگویید که آیا سال ورودی کبیثه است یا خیر",
        "input": "",
        "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            return year % 400 == 0\n        return True\n    return False"
    },
    {
        "instruction": "تابعی در پایتون بنویسید که سینوس را با استفاده از بسط تیلور محاسبه کند",
        "input": "",
        "output": "def sine_taylor_series(x, n_terms=10):\n    result = 0\n    for n in range(n_terms):\n        term = ((-1)**n) * (x**(2*n + 1)) / factorial(2*n + 1)\n        result += term\n    return result"
    },
    {
        "instruction": "در پایتون تابعی بنویسید که عداد رومی را به اعداد مبنای ده تبدیل کند",
        "input": "",
        "output": "def roman_to_decimal(roman):\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    decimal = 0\n    prev_value = 0\n    for numeral in reversed(roman):\n        value = roman_numerals[numeral]\n        if value < prev_value:\n            decimal -= value\n        else:\n            decimal += value\n        prev_value = value\n    return decimal"
    },
    {
        "instruction": "عدد قوی به عددی می‌گوییم که برابر با مجموع فاکتوریل ارقامش باشد،‌در پایتون تابعی بنویسید که بگوید عدد مورد نظر قوی است یا خیر",
        "input": "",
        "output": "def is_strong_number(n):\n    def factorial(num):\n        return 1 if num == 0 else num * factorial(num - 1)\n    return n == sum(factorial(int(digit)) for digit in str(n))"
    },
    {
        "instruction": "دترمینان یک ماتریس دو در دو را با استفاده از پایتون محاسبه کنید",
        "input": "",
        "output": "def determinant_2x2(matrix):\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]"
    },
    {
        "instruction": "تابعی بنویسیدی که در پایتون اجتماع دو لیست را محاسبه کند",
        "input": "",
        "output": "def union(lst1, lst2):\n        return list(set(lst1) | set(lst2))"
    },
    {
        "instruction": "لیست پیوندی را در پایتون پیاده‌سازی کنید",
        "input": "",
        "output": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        if not self.head:\n            self.head = Node(data)\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = Node(data)\n\n    def display(self):\n        elements = []\n        current_node = self.head\n        while current_node:\n            elements.append(current_node.data)\n            current_node = current_node.next\n        return elements"
    }
]
